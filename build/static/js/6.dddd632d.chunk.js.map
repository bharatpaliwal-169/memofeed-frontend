{"version":3,"sources":["components/NavbarUI/DrawerUI.jsx"],"names":["DrawerUI","_user$result","_user$result2","_user$result3","classes","useStyles","_useState","useState","_useState2","_slicedToArray","openDrawer","setOpenDrawer","_useState3","JSON","parse","localStorage","getItem","_useState4","user","setUser","dispatch","useDispatch","location","useLocation","history","useHistory","logout","type","actionType","push","useEffect","token","decode","exp","Date","getTime","_jsxs","_Fragment","children","_jsx","Drawer","open","onClose","List","className","ListItem","onClick","ListItemText","Typography","variant","heading","Divider","Avatar","purple","alt","result","name","src","imageUrl","charAt","userName","component","style","fontSize","padding","verified","Chip","label","color","marginBottom","marginTop","Button","Link","to","IconButton","icon","MenuIcon"],"mappings":"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","file":"static/js/6.dddd632d.chunk.js","sourcesContent":["//react\r\nimport React,{useState,useEffect} from 'react'\r\nimport {Link,useHistory,useLocation} from 'react-router-dom';\r\nimport decode from 'jwt-decode';\r\n\r\n//redux\r\nimport {useDispatch} from 'react-redux'\r\nimport * as actionType from '../../redux/types/actionTypes'\r\n\r\n//css\r\nimport { Divider,Drawer,IconButton,Avatar,Button,Typography,Chip,\r\n  List,ListItem,ListItemText} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport useStyles from \"./styles\"\r\n\r\nconst DrawerUI = () => {\r\n  const classes = useStyles();\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const logout = () => {\r\n    dispatch({ type: actionType.LOGOUT });\r\n    history.push('/auth');\r\n    setUser(null);\r\n  };\r\n  const handleProfile = () => {\r\n    history.push(\"/profile\")\r\n  }\r\n\r\n  useEffect(() => {\r\n    const token = user?.token;\r\n    if(token) {\r\n      const decodedToken = decode(token);\r\n      if(decodedToken.exp * 1000 < new Date().getTime()){\r\n        logout();\r\n      }\r\n    }\r\n    setUser(JSON.parse(localStorage.getItem('profile')));\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [location])\r\n\r\n  return (\r\n    <>\r\n\r\n      <Drawer open={openDrawer} onClose={() => setOpenDrawer(false)}>\r\n        <List className={classes.List}>\r\n          <ListItem onClick={() => setOpenDrawer(false)}>\r\n            <ListItemText>\r\n              <Typography variant='h5' className={classes.heading} >\r\n                Memofeed\r\n              </Typography>\r\n            </ListItemText>\r\n          </ListItem>\r\n          <Divider/>\r\n          {user ? (\r\n            <>\r\n              <ListItem onClick={() => setOpenDrawer(false)}>\r\n                <ListItemText>\r\n                  <Avatar className={classes.purple} alt={user.result.name} src = {user.result.imageUrl}>\r\n                    {user?.result?.name.charAt(0)}\r\n                  </Avatar>\r\n\r\n                  <Typography className={classes.userName} variant=\"h6\">\r\n                    {user?.result?.name}\r\n                  </Typography>\r\n\r\n                  <Typography variant='body1' component=\"div\" style={{fontSize:'0.5rem',padding:'0.5rem'}}>\r\n                    {user?.result?.verified ===true ? <Chip label=\"Verified &#x2714;\" color=\"primary\" /> :null}\r\n                  </Typography>\r\n\r\n                </ListItemText>\r\n              </ListItem>\r\n              <Divider />\r\n              \r\n              <ListItem onClick={handleProfile}>\r\n                <ListItemText>\r\n                  <Typography variant=\"h6\" style={{marginBottom:'0.25rem',marginTop:'0.25rem'}}>\r\n                    My Profile\r\n                  </Typography>\r\n                </ListItemText>\r\n              </ListItem>\r\n\r\n              <Divider />\r\n\r\n              <Button className={classes.logout} variant=\"contained\" \r\n                color=\"secondary\" onClick={logout}>\r\n                Logout\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <ListItem onClick={() => setOpenDrawer(false)}>\r\n                <ListItemText>\r\n                  <Avatar >\r\n                    U\r\n                  </Avatar>\r\n                  <Typography className={classes.userName} variant=\"h6\">\r\n                    Default User\r\n                  </Typography>\r\n                </ListItemText>\r\n              </ListItem>\r\n              <Divider/>\r\n\r\n              <Button component={Link} to=\"/auth\" variant=\"contained\" color=\"primary\">Login/Sign in</Button>\r\n            </>\r\n          )}\r\n        </List>\r\n      </Drawer>\r\n      \r\n      <IconButton onClick={() => setOpenDrawer(!openDrawer)}className={classes.icon}>\r\n        <MenuIcon />\r\n      </IconButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DrawerUI"],"sourceRoot":""}